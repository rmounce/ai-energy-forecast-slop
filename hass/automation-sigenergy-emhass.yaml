alias: Battery EMS Control Based on EMHASS Forecasts
description: ""
triggers:
  - minutes: /5
    trigger: time_pattern
  - entity_id:
      - number.sigen_plant_grid_export_limitation
      - sensor.amber_effective_general_price
      - sensor.amber_effective_feed_in_price
    trigger: state
actions:
  - variables:
      p_load_timestamp: >
        {%- set ns = namespace(value='unknown') %} {%- for item in
        state_attr('sensor.mpc_p_load_forecast', 'forecasts') %}
          {%- if as_datetime(item.date) <= utcnow() %}
            {% set ns.value = utcnow() | string + item.date | string %}
          {%- endif %}
        {%- endfor %} {{ ns.value }}
      p_batt: >
        {%- set ns = namespace(value=states('sensor.mpc_p_batt_forecast')) %}
        {%- for item in state_attr('sensor.mpc_p_batt_forecast',
        'battery_scheduled_power') %}
          {%- if as_datetime(item.date) <= utcnow() %}
            {% set ns.value = item.mpc_p_batt_forecast %}
          {%- endif %}
        {%- endfor %} {{ ns.value | float('unknown') }}
      p_grid: >
        {%- set ns = namespace(value=states('sensor.mpc_p_grid_forecast')) %}
        {%- for item in state_attr('sensor.mpc_p_grid_forecast', 'forecasts') %}
          {%- if as_datetime(item.date) <= utcnow() %}
            {% set ns.value = item.mpc_p_grid_forecast %}
          {%- endif %}
        {%- endfor %} {{ ns.value | float('unknown') }}
      p_load: >
        {%- set ns = namespace(value=states('sensor.mpc_p_load_forecast')) %}
        {%- for item in state_attr('sensor.mpc_p_load_forecast', 'forecasts') %}
          {%- if as_datetime(item.date) <= utcnow() %}
            {% set ns.value = item.mpc_p_load_forecast %}
          {%- endif %}
        {%- endfor %} {{ ns.value | float('unknown') }}
      p_pv: >
        {%- set ns = namespace(value=states('sensor.mpc_p_pv_forecast')) %} {%-
        for item in state_attr('sensor.mpc_p_pv_forecast', 'forecasts') %}
          {%- if as_datetime(item.date) <= utcnow() %}
            {% set ns.value = item.mpc_p_pv_forecast %}
          {%- endif %}
        {%- endfor %} {{ ns.value | float('unknown') }}
      p_hybrid_inverter: >
        {%- set ns = namespace(value=states('sensor.mpc_p_hybrid_inverter')) %}
        {%- for item in state_attr('sensor.mpc_p_hybrid_inverter', 'forecasts')
        %}
          {%- if as_datetime(item.date) <= utcnow() %}
            {% set ns.value = item.mpc_p_hybrid_inverter %}
          {%- endif %}
        {%- endfor %} {{ ns.value | float('unknown') }}
      p_pv_curtailment: >
        {%- set ns = namespace(value=states('sensor.mpc_p_pv_curtailment')) %}
        {%- for item in state_attr('sensor.mpc_p_pv_curtailment', 'forecasts')
        %}
          {%- if as_datetime(item.date) <= utcnow() %}
            {% set ns.value = item.mpc_p_pv_curtailment %}
          {%- endif %}
        {%- endfor %} {{ ns.value | float('unknown') }}
      soc: >
        {{ states('sensor.sigen_plant_battery_state_of_charge') |
        float('unknown') }}
      max_grid_import: 14999
      max_grid_export: -9999
      max_inverter_discharge: 10999
      max_inverter_charge: -10999
      max_grid_export_kw: 10
  - choose:
      - conditions:
          - condition: template
            value_template: >-
              {{ (states('sensor.amber_effective_general_price') | float) <= 0
              and
                 (state_attr('sensor.mpc_p_pv_curtailment', 'forecasts')|map(attribute='mpc_p_pv_curtailment')|map('float')|max) > 0
              }}
        sequence:
          - data_template:
              entity_id: input_text.emhass_battery_action
              value: Full PV curtailment and grid charge at full rate (negative buy)
            action: input_text.set_value
          - data:
              control_mode: Command Charging (PV First)
              export_limit_kw: 0
              pv_max_power_limit_kw: 0.05
            action: script.configure_sigen_ems_state
      - conditions:
          - condition: template
            value_template: >-
              {{ (states('sensor.amber_effective_general_price') | float) <= 0
              }}
        sequence:
          - data_template:
              entity_id: input_text.emhass_battery_action
              value: Grid charge at full rate (negative buy)
            action: input_text.set_value
          - data:
              control_mode: Command Charging (PV First)
              export_limit_kw: 0
            action: script.configure_sigen_ems_state
      - conditions:
          - condition: template
            value_template: >-
              {{ (p_grid >= max_grid_import or p_hybrid_inverter <=
              max_inverter_charge) and p_pv_curtailment > 0 and p_pv ==
              p_pv_curtailment }}
        sequence:
          - data_template:
              entity_id: input_text.emhass_battery_action
              value: Full PV curtailment and grid charge at full rate
            action: input_text.set_value
          - data:
              control_mode: Command Charging (PV First)
              export_limit_kw: 0
              pv_max_power_limit_kw: 0.05
            action: script.configure_sigen_ems_state
      - conditions:
          - condition: template
            value_template: >-
              {{ p_grid > 0 and p_batt < 0 and p_pv_curtailment > 0 and p_pv ==
              p_pv_curtailment }}
        sequence:
          - data_template:
              entity_id: input_text.emhass_battery_action
              value: Full PV curtailment and grid charge at partial rate
            action: input_text.set_value
          - data:
              control_mode: Command Charging (PV First)
              export_limit_kw: 0
              pv_max_power_limit_kw: 0.05
              charge_limit_kw: "{{ (-p_batt / 1000) | round(3) }}"
            action: script.configure_sigen_ems_state
      - conditions:
          - condition: template
            value_template: >-
              {{ p_grid >= max_grid_import or p_hybrid_inverter <=
              max_inverter_charge }}
        sequence:
          - data_template:
              entity_id: input_text.emhass_battery_action
              value: Grid charge at full rate
            action: input_text.set_value
          - data:
              control_mode: Command Charging (PV First)
              export_limit_kw: 0
            action: script.configure_sigen_ems_state
      - conditions:
          - condition: template
            value_template: >-
              {{ p_hybrid_inverter == 0 and p_load == p_grid and p_pv == -p_batt
              and p_batt < 0 }}
        sequence:
          - data_template:
              entity_id: input_text.emhass_battery_action
              value: DC-coupled PV charging, grid powers home
            action: input_text.set_value
          - data:
              control_mode: Maximum Self Consumption
              pcs_export_limit_kw: 0
            action: script.configure_sigen_ems_state
      - conditions:
          - condition: template
            value_template: "{{ p_grid > 0 and p_batt < 0 }}"
        sequence:
          - data_template:
              entity_id: input_text.emhass_battery_action
              value: Grid charge at partial rate
            action: input_text.set_value
          - data:
              control_mode: Command Charging (PV First)
              charge_limit_kw: "{{ (-p_batt / 1000) | round(3) }}"
              export_limit_kw: 0
            action: script.configure_sigen_ems_state
      - conditions:
          - condition: template
            value_template: "{{ soc >= 99.8 and p_batt == 0 and p_pv_curtailment > 0 }}"
        sequence:
          - data_template:
              entity_id: input_text.emhass_battery_action
              value: Battery full, curtail PV export
            action: input_text.set_value
          - data:
              control_mode: Maximum Self Consumption
              export_limit_kw: 0
            action: script.configure_sigen_ems_state
      - conditions:
          - condition: template
            value_template: "{{ soc >= 99.8 and p_batt == 0 and p_pv > 0 and p_grid < 0 }}"
        sequence:
          - data_template:
              entity_id: input_text.emhass_battery_action
              value: Battery full, export PV to grid
            action: input_text.set_value
          - data:
              control_mode: Maximum Self Consumption
              export_limit_kw: "{{ max_grid_export_kw }}"
            action: script.configure_sigen_ems_state
      - conditions:
          - condition: template
            value_template: "{{ p_pv_curtailment > 0 and p_batt == 0 }}"
        sequence:
          - data_template:
              entity_id: input_text.emhass_battery_action
              value: >-
                Partial PV curtailment, prevent charging and export, permit
                discharge
            action: input_text.set_value
          - data:
              control_mode: Maximum Self Consumption
              charge_cutoff_soc: "{{ soc - 1.0 }}"
              export_limit_kw: 0
            action: script.configure_sigen_ems_state
      - conditions:
          - condition: template
            value_template: "{{ p_pv > 0 and p_grid > 0 and p_batt == 0 }}"
        sequence:
          - data_template:
              entity_id: input_text.emhass_battery_action
              value: Consume from PV, then grid, prevent discharging, allow charge
            action: input_text.set_value
          - data:
              control_mode: Command Discharging (PV First)
              discharge_limit_kw: 0
              export_limit_kw: 0
            action: script.configure_sigen_ems_state
      - conditions:
          - condition: template
            value_template: "{{ p_pv_curtailment > 0 }}"
        sequence:
          - data_template:
              entity_id: input_text.emhass_battery_action
              value: Partial PV curtailment, prevent export
            action: input_text.set_value
          - data:
              control_mode: Maximum Self Consumption
              export_limit_kw: 0
            action: script.configure_sigen_ems_state
      - conditions:
          - condition: template
            value_template: >-
              {{ (states('sensor.amber_effective_feed_in_price') | float) <= 0
              }}
        sequence:
          - data_template:
              entity_id: input_text.emhass_battery_action
              value: Partial PV curtailment, prevent export (fallback)
            action: input_text.set_value
          - data:
              control_mode: Maximum Self Consumption
              export_limit_kw: 0
            action: script.configure_sigen_ems_state
      - conditions:
          - condition: template
            value_template: "{{ p_grid == p_load and p_batt == 0 and p_pv == 0 }}"
        sequence:
          - data_template:
              entity_id: input_text.emhass_battery_action
              value: Consume from grid, battery idle
            action: input_text.set_value
          - data:
              control_mode: Standby
            action: script.configure_sigen_ems_state
      - conditions:
          - condition: template
            value_template: "{{ p_batt > 0 and p_grid > 0 }}"
        sequence:
          - data_template:
              entity_id: input_text.emhass_battery_action
              value: Partial self-consume from battery, then grid
            action: input_text.set_value
          - data:
              control_mode: Command Discharging (PV First)
              discharge_limit_kw: "{{ (p_batt / 1000) | round(3) }}"
              export_limit_kw: 0
            action: script.configure_sigen_ems_state
      - conditions:
          - condition: template
            value_template: "{{ p_grid == 0 }}"
        sequence:
          - data_template:
              entity_id: input_text.emhass_battery_action
              value: Self-consume from battery
            action: input_text.set_value
          - data:
              control_mode: Maximum Self Consumption
            action: script.configure_sigen_ems_state
      - conditions:
          - condition: template
            value_template: "{{ p_batt == 0 and p_pv > 0 and p_grid < 0 }}"
        sequence:
          - data_template:
              entity_id: input_text.emhass_battery_action
              value: Export PV to grid, prevent charging, allow discharge
            action: input_text.set_value
          - data:
              control_mode: Maximum Self Consumption
              charge_cutoff_soc: "{{ soc - 1.0 }}"
              export_limit_kw: "{{ max_grid_export_kw }}"
            action: script.configure_sigen_ems_state
      - conditions:
          - condition: template
            value_template: >-
              {{ p_hybrid_inverter >= max_inverter_discharge or p_grid >=
              max_grid_export }}
        sequence:
          - data_template:
              entity_id: input_text.emhass_battery_action
              value: Force discharge to grid at full rate
            action: input_text.set_value
          - data:
              control_mode: Command Discharging (PV First)
              export_limit_kw: "{{ max_grid_export_kw }}"
            action: script.configure_sigen_ems_state
      - conditions:
          - condition: template
            value_template: "{{ p_grid < 0 }}"
        sequence:
          - data_template:
              entity_id: input_text.emhass_battery_action
              value: Force discharge to grid at partial rate
            action: input_text.set_value
          - data:
              control_mode: Command Discharging (PV First)
              export_limit_kw: "{{ (-p_grid / 1000) | round(3) }}"
            action: script.configure_sigen_ems_state
    default:
      - data_template:
          entity_id: input_text.emhass_battery_action
          value: DEFAULT Self-consume from battery
        action: input_text.set_value
      - data:
          control_mode: Maximum Self Consumption
        action: script.configure_sigen_ems_state
trace:
  stored_traces: 10
mode: single
